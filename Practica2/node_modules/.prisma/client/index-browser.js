
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  detectRuntime,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.5.2
 * Query Engine version: aebc046ce8b88ebbcb45efe31cbe7d06fd6abc0a
 */
Prisma.prismaVersion = {
  client: "5.5.2",
  engine: "aebc046ce8b88ebbcb45efe31cbe7d06fd6abc0a"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  lname: 'lname',
  phone: 'phone',
  idCard: 'idCard',
  semestre: 'semestre',
  status: 'status',
  alias: 'alias',
  biography: 'biography'
};

exports.Prisma.FollowerScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  comunityId: 'comunityId',
  date: 'date',
  status: 'status'
};

exports.Prisma.ComunityScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  date_start: 'date_start'
};

exports.Prisma.ForoScalarFieldEnum = {
  id: 'id',
  subject: 'subject',
  description: 'description',
  date_publication: 'date_publication',
  date_update: 'date_update',
  comunityId: 'comunityId'
};

exports.Prisma.AnswerScalarFieldEnum = {
  id: 'id',
  message: 'message',
  foroId: 'foroId'
};

exports.Prisma.ResponseScalarFieldEnum = {
  id: 'id',
  message: 'message',
  foroId: 'foroId',
  answerId: 'answerId'
};

exports.Prisma.RolScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.LinkScalarFieldEnum = {
  id: 'id',
  rolId: 'rolId',
  name: 'name',
  Link: 'Link'
};

exports.Prisma.User_line_linkScalarFieldEnum = {
  id: 'id',
  linkId: 'linkId',
  userId: 'userId'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description'
};

exports.Prisma.ServiceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  DATE_START: 'DATE_START',
  DATE_END: 'DATE_END'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  categoryId: 'categoryId',
  serviceid: 'serviceid',
  name: 'name',
  description: 'description',
  price: 'price',
  date_create: 'date_create',
  status: 'status'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  lname: 'lname',
  phone: 'phone',
  idCard: 'idCard',
  Company: 'Company',
  city: 'city',
  job: 'job'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  date: 'date'
};

exports.Prisma.Inv_Line_ProScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  invoiceId: 'invoiceId'
};

exports.Prisma.PublicationScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  userId: 'userId',
  name: 'name',
  description: 'description',
  image: 'image',
  date: 'date',
  status: 'status'
};

exports.Prisma.ReactScalarFieldEnum = {
  id: 'id',
  publicationId: 'publicationId',
  name: 'name'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  publicationId: 'publicationId',
  text: 'text'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  Follower: 'Follower',
  Comunity: 'Comunity',
  Foro: 'Foro',
  Answer: 'Answer',
  Response: 'Response',
  Rol: 'Rol',
  Link: 'Link',
  user_line_link: 'user_line_link',
  Category: 'Category',
  Service: 'Service',
  Product: 'Product',
  Customer: 'Customer',
  Invoice: 'Invoice',
  Inv_Line_Pro: 'Inv_Line_Pro',
  Publication: 'Publication',
  React: 'React',
  Comment: 'Comment'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        const runtime = detectRuntime()
        const edgeRuntimeName = {
          'workerd': 'Cloudflare Workers',
          'deno': 'Deno and Deno Deploy',
          'netlify': 'Netlify Edge Functions',
          'edge-light': 'Vercel Edge Functions',
        }[runtime]

        let message = 'PrismaClient is unable to run in '
        if (edgeRuntimeName !== undefined) {
          message += edgeRuntimeName + '. As an alternative, try Accelerate: https://pris.ly/d/accelerate.'
        } else {
          message += 'this browser environment, or has been bundled for the browser (running in `' + runtime + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://github.com/prisma/prisma/issues`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
